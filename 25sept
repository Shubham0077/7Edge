const calculateBlockedAmount = (index: number) => {
    setBidData((prevBidData) => {
      const newBidData = [...prevBidData];
      const quantity = parseInt(newBidData[index].quantity, 10) || 0;
      const price = parseInt(newBidData[index].price, 10) || 0;
      newBidData[index].price = price.toString();
      newBidData[index].amount = (quantity * price).toFixed(2);
      newBidData[index].formattedPrice = price.toFixed(2);
      newBidData[index].formattedAmount = (quantity * price).toFixed(2);
      const discount: number = Number(quantity * discountAmount);
      let minBidAmt: number = minimumApplicationAmt;
      let maxBidAmt: number = maximumApplicationAmt;

      let amountText = 'Application Bid Amount';
      if (miscountAllowed == 'Y') {
        amountText = 'Application Discount Bid Amount';
        minBidAmt = discountedMinimumBidPrice * minimumNoOFShares;
        maxBidAmt = discountedMaximumBidPrice * maximumNoOFShares;
        const discountedAmt = String(quantity * price - discount);
        newBidData[index].discountedAmount = parseFloat(discountedAmt).toFixed(2);
      }
      let maxPriceRow: any = [];
      let maxAmount: any = '';
      if (miscountAllowed == 'Y') {
        maxAmount = Math.max(...newBidData.map((bid: any) => bid.discountedAmount));
        maxPriceRow = newBidData.filter((bid) => bid.discountedAmount == maxAmount);
      } else {
        maxAmount = Math.max(...newBidData.map((bid: any) => bid.amount));
        maxPriceRow = newBidData.filter((bid) => bid.amount == maxAmount);
      }

      if (maxAmount && quantity > 0) {
        const error = !(maxAmount > 0 && maxAmount >= minBidAmt && maxAmount <= maxBidAmt)
          ? `${amountText} must be between ₹${minBidAmt} and ₹${maxBidAmt}`
          : '';

        newBidData[index] = {
          ...newBidData[index],
          [`bidAmountError`]: error,
        };
      }

      setMaxBidAmount(maxAmount);
      setMaxBiddetailsRow({ ...maxPriceRow[0], maxBidValue: maxAmount.toFixed(2) });
      return newBidData;
    });
  };
