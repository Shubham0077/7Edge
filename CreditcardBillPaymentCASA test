import '@testing-library/jest-dom';
import { fireEvent, render, screen } from '@testing-library/react';
import LocaleConstant from '../../public/locales/en-us.json';
import { useDispatch, useSelector } from 'react-redux';
import CreditcardBillPaymentCASA from '../../pages/creditcardBillPaymentCASA';
import { SCREEN_NAMES } from '../../utils/constants';
import { useRouter } from 'next/router';

jest.mock('authorization/authSlice', () => {}, { virtual: true });

jest.mock('jose', () => ({
  jose: jest.fn(),
}));


jest.mock('react-redux');

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
  dispatch: jest.fn(),
}));
jest.mock('@moengage/web-sdk', () => ({
  initialize: jest.fn(),
  add_unique_user_id: jest.fn(),
  track_event: jest.fn(),
  add_user_attribute: jest.fn(),
  isMoeLoaded: jest.fn().mockReturnValue(true),
}));
jest.mock('ui', () => ({
  ...jest.requireActual('ui'),
  useLocale: () => ({
    ...LocaleConstant,
  }),
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));
const push = jest.fn();
(useRouter as jest.Mock).mockReturnValue({ push });

describe('ConvertToEmi', () => {
  test('navigates to the correct screen on footer button click', () => {
    useDispatch.mockReturnValue(jest.fn());
    const { getByText } = render(<CreditcardBillPaymentCASA />);

    expect(getByText(/Pay Credit Card Bill/i)).toBeInTheDocument();
    expect(getByText('Select or enter the amount')).toBeInTheDocument();
    expect(getByText('Expiry Date')).toBeInTheDocument();
    expect(getByText('CVV')).toBeInTheDocument();
    expect(getByText('Cancel')).toBeInTheDocument();
  });
  test('navigates to the correct screen on footer button click', () => {
    useDispatch.mockReturnValue(jest.fn());
    useSelector.mockImplementation((cb: any) => cb({}));
    render(<CreditcardBillPaymentCASA />);

    fireEvent.change(screen.getByLabelText(/Pay Last Bill Due/i), {
      target: { value: 'PAY_LAST_BILL_DUE' },
    });
    expect(screen.getByLabelText(/Pay Last Bill Due/i).checked).toBe(false);
    const radios = screen.getAllByRole('radio');
    expect(radios).toHaveLength(4);
    const radio1 = screen.getByLabelText(/Pay Last Bill Due/i);
    const radio2 = screen.getByLabelText(/Pay Minimum Due/i);
    const radio3 = screen.getByLabelText(/Pay Total Outstanding/i);
    const radio4 = screen.getByLabelText(/Custom Amount/i);

    expect(radio1).toBeInTheDocument();
    expect(radio2).toBeInTheDocument();
    expect(radio3).toBeInTheDocument();
    expect(radio4).toBeInTheDocument();

    fireEvent.click(radio1);
    fireEvent.click(radio2);
    fireEvent.click(radio3);
    fireEvent.click(radio4);
  });
  test('navigates to the correct screen on footer button click', () => {
    useDispatch.mockReturnValue(jest.fn());
    useSelector.mockImplementation((cb: any) =>
      cb({
        authdata: {
          verifyPostLoginResp: {
            cifDetails: [
              {
                finacleCif: [
                  {
                    accounts: [{ schemeType: 'SBA', accountStatus: 'A', accountNumber: '123' }],
                  },
                ],
              },
            ],
          },
          mopAccessResp: {
            cifDetails: [
              {
                finacleCif: [
                  {
                    accounts: [
                      { accessType: 'Transact', accountStatus: 'A', accountNumber: '123' },
                    ],
                  },
                ],
              },
            ],
          },
          passwordVerfiedResp: {
            scope: 'retail',
          },
        },
      }),
    );

    const { getByRole } = render(<CreditcardBillPaymentCASA />);
    const radio4 = screen.getByLabelText(/Custom Amount/i);

    expect(radio4).toBeInTheDocument();

    fireEvent.click(radio4);

    fireEvent.click(screen.getByRole('button', { name: 'Cancel' }));
    expect(push).toHaveBeenCalledWith(SCREEN_NAMES.DASHBOARD);
    expect(screen.getByRole('button', { name: 'Proceed' })).toBeDisabled();

    const radio1 = screen.getByLabelText(/Pay Last Bill Due/i);
    fireEvent.click(radio1);
    expect(screen.getByRole('button', { name: 'Proceed' })).toBeEnabled();
    fireEvent.click(screen.getByRole('button', { name: 'Proceed' }));

    const radio3 = screen.getByLabelText(/Pay Total Outstanding/i);
    fireEvent.click(radio3);
    expect(screen.getByRole('button', { name: 'Proceed' })).toBeEnabled();
    fireEvent.click(screen.getByRole('button', { name: 'Proceed' }));
  });
});
