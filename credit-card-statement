import React, { useEffect, useState } from 'react';
import ScreenContainer from '../../components/screenContainer';
import styles from '../../styles/creditCardStatement/creditCardStatement.module.css';
import { useRouter } from 'next/router';
import { CREDIT_CARD_APP, useLocale } from 'ui';
import { NOTIFICATION_TYPE, SCREEN_NAMES, constants, sortedMonthList } from '../../utils/constants';
import {
  Box,
  Button,
  FormControl,
  FormControlLabel,
  Grid,
  Modal,
  Radio,
  RadioGroup,
  SelectChangeEvent,
  Stack,
  Typography,
} from '@mui/material';
import MuiDropdown from '../../components/common-components/MuiDropDown';
import { useDispatch, useSelector } from 'react-redux';
import {
  ICreditCardStatements,
  getCreditcardDateAction,
} from '../../redux/slices/creditCardStatementsSlice';
import {
  ICreditCardDashboard,
  hideNotification,
  showNotification,
} from '../../redux/slices/creditCardDashboardSlice';
import { AppDispatch, IState } from '../../redux/creditcardStore';
import { IStatementDate } from '../../redux/business/creditCardStatementsBusiness';
import moment from 'moment';

const CreditCardStatement = () => {
  const router = useRouter();
  const locale = useLocale(useRouter().locale)?.creditcard;
  const dispatch: AppDispatch = useDispatch();
  const rootReducer = useSelector((state: IState) => state);
  const [getMonths, setGetMonths] = useState<any>();
  const creditCardDashboardReducer: ICreditCardDashboard =
    rootReducer?.creditcardCombineReducers?.creditCardDashboardReducer;
  const selectedCard = creditCardDashboardReducer?.selectedCreditCardData ?? {};

  const creditCardStatementReducer: ICreditCardStatements =
    rootReducer?.creditcardCombineReducers?.creditCardStatementReducer;
  const [selectedMonthOption, setSelectedMonthOption] = useState<string>('');
  const [selectedYearOption, setSelectedYearOption] = useState<string>('');
  const [multipleLillingCyclesOption, setMultipleLillingCyclesOption] = useState<IStatementDate[]>(
    [],
  );
  const [selectChooseBillingCycleModalEnable, setSelectChooseBillingCycleModalEnable] =
    useState<boolean>(false);
  const [selectedBillingCycleDate, setSelectedBillingCycleDate] = useState<string>('');

  const [showMonths, setShowMonths] = useState<boolean>(true);
  useEffect(() => {
    dispatch(getCreditcardDateAction({ account: selectedCard?.crdNbr }));
  }, []);

  const handleOptionChangeMonth = (event?: SelectChangeEvent | undefined) => {
    const value = event?.target?.value ?? '';
    setSelectedMonthOption(value);
    setSelectedBillingCycleDate('');
  };

  const onConfirmClick = () => {
    const searchisThereAnyMatchingStatementDate =
      creditCardStatementReducer?.creditCardStatementDateList?.filter((item) => {
        const selMnthOption = sortedMonthList.find(
          (month) => month.value === selectedMonthOption,
        )?.label;
        return (
          item?.sdStmtMonth === selMnthOption && item?.sdStmtYear === String(selectedYearOption)
        );
      }) ?? [];

    if (searchisThereAnyMatchingStatementDate?.length > 1) {
      setMultipleLillingCyclesOption(searchisThereAnyMatchingStatementDate);
      setSelectChooseBillingCycleModalEnable(true);
    } else if (searchisThereAnyMatchingStatementDate?.length === 1) {
      setSelectChooseBillingCycleModalEnable(false);
      router.push({
        pathname: SCREEN_NAMES.DOWNLOAD_STATEMENT,
        query: { stmtDt: searchisThereAnyMatchingStatementDate?.[0]?.sdStmtDt },
      });
    } else {
      setSelectChooseBillingCycleModalEnable(false);
      const param = {
        enable: true,
        msg: locale?.CC_STATEMENT_NOT_FOUND,
        type: NOTIFICATION_TYPE.FAILURE,
      };
      dispatch(showNotification(param));
    }
  };
  const onSelectBillingCycle = (event?: SelectChangeEvent) => {
    setSelectedBillingCycleDate(event?.target?.value ?? '');
  };
  const onSubmitBillingCycle = () => {
    router.push({
      pathname: SCREEN_NAMES.DOWNLOAD_STATEMENT,
      query: { stmtDt: selectedBillingCycleDate },
    });
  };
  const CreditCardStatementContainer = () => {
    const currentYear = moment().year();
    const prevYear = moment().subtract(1, 'years');
    const onemoreprevYear = moment().subtract(2, 'years');
    const currentMonth = moment().month();
    const startDate = moment().subtract(18, 'months');
    const startMonth = startDate.month();
    const uniqueYearList = [];
    uniqueYearList.push({ label: currentYear, value: currentYear });
    uniqueYearList.push({ label: prevYear.year(), value: prevYear.year() });
    uniqueYearList.push({ label: onemoreprevYear.year(), value: onemoreprevYear.year() });

    useEffect(() => {
      if (parseInt(selectedYearOption) === onemoreprevYear.year()) {
        console.log('onemoreprevYear');
        setGetMonths(sortedMonthList);
      } else if (parseInt(selectedYearOption) === prevYear.year()) {
        console.log('startYear');
        setGetMonths(sortedMonthList);
      } else if (parseInt(selectedYearOption) === currentYear) {
        console.log('currentYear');
        setGetMonths(sortedMonthList.filter((month) => parseInt(month.value) <= currentMonth));
      }
    }, [selectedYearOption]);

    const handleOptionChangeYear = (event?: SelectChangeEvent | undefined) => {
      const value = event?.target?.value;
      console.log(value);

      console.log(sortedMonthList.filter((month) => parseInt(month.value) >= startMonth));
      setSelectedYearOption(value);
      setSelectedBillingCycleDate('');
      setSelectedMonthOption('');
      setShowMonths(false);
    };

    return (
      <Grid item xs={12} sm={8.5}>
        <Box className={styles.boxDivContainer} p={3}>
          <Grid container mb={10}>
            <Grid item xs={12} mb={3}>
              <Typography className={styles.HeaderText}>{locale?.SELECT_PERIOD}</Typography>
            </Grid>
            <Grid container item xs={12} spacing={3}>
              <Grid item xs={6}>
                <MuiDropdown
                  disabled={showMonths}
                  data={getMonths}
                  headerText={locale?.SELECT_MONTH}
                  onChange={handleOptionChangeMonth}
                  value={selectedMonthOption}
                  placeholder={locale?.SELECT_MONTH}
                />
              </Grid>
              <Grid item xs={6}>
                <MuiDropdown
                  data={uniqueYearList}
                  headerText={locale?.SELECT_YEAR}
                  onChange={handleOptionChangeYear}
                  value={selectedYearOption}
                  placeholder={locale?.SELECT_YEAR}
                />
              </Grid>
            </Grid>
            <Grid item xs={12} mt={4}>
              <Box className={styles.boxDiv} p={1}>
                <Grid container>
                  <Grid item>
                    <img
                      src={CREDIT_CARD_APP.infoicon}
                      alt="infoicon"
                      className={styles.infoicon}
                    />
                  </Grid>
                  <Grid item xs={10}>
                    <Stack>
                      <Typography className={'Label16_Midium'} gutterBottom>
                        {locale?.NOTE}
                      </Typography>
                      <Typography className={`Label14 ${styles.infoText}`}>
                        {locale?.CC_STATEMENT_VIEW_INFO}
                        {` `}
                        <span className={styles.helplineText}>
                          {constants.CC_STATEMENT_HELPLINE}
                        </span>
                      </Typography>
                    </Stack>
                  </Grid>
                </Grid>
              </Box>
            </Grid>
          </Grid>
        </Box>
      </Grid>
    );
  };
  const onClickHideNotification = () => {
    dispatch(hideNotification());
  };
  return (
    <ScreenContainer
      loader={creditCardDashboardReducer?.isLoading}
      screenName={locale?.PAST_STATEMENT}
      showMore={false}
      footerOnCancelText={locale?.VIEW_CC_STATEMENT}
      footerOnSuccessText={locale?.CONFIRM_BUTTON}
      enableConfirmBtn={Boolean(selectedMonthOption && selectedYearOption)}
      footerOnCancel={onConfirmClick}
      footerOnSuccess={onConfirmClick}
      notification={{
        enable: creditCardDashboardReducer?.notification?.enable,
        notificationMSG: creditCardDashboardReducer?.notification?.notificationMSG,
        type: creditCardDashboardReducer?.notification?.type,
        onHideNotification: onClickHideNotification,
      }}
    >
      {CreditCardStatementContainer()}
      <Modal
        open={selectChooseBillingCycleModalEnable}
        onClose={() => setSelectChooseBillingCycleModalEnable(false)}
      >
        <Box className={styles.modalStyle}>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <Typography variant="h6" className={styles.HeaderText}>
                {locale?.CC_SELECT_BILLING_CYCLE}
              </Typography>
            </Grid>
            <Grid item xs={12}>
              <FormControl>
                <RadioGroup
                  aria-labelledby="demo-radio-buttons-group-label"
                  name="radio-buttons-group"
                  className={styles.radioButtons}
                  onChange={onSelectBillingCycle}
                >
                  {multipleLillingCyclesOption?.map((item: IStatementDate, index: number) => {
                    return (
                      <FormControlLabel
                        key={`billingCycle${index?.toString}`}
                        value={item?.sdStmtDt}
                        control={<Radio />}
                        label={item?.statementDateDDMMMYYYY}
                      />
                    );
                  })}
                </RadioGroup>
              </FormControl>
            </Grid>
            <Grid item xs={12} className={styles.successBtnWrapper}>
              <Button
                disabled={!selectedBillingCycleDate}
                onClick={onSubmitBillingCycle}
                variant="contained"
                className={
                  selectedBillingCycleDate ? styles.successBtnEnable : styles.successBtnDisable
                }
              >
                {locale?.SUBMIT}
              </Button>
            </Grid>
          </Grid>
        </Box>
      </Modal>
    </ScreenContainer>
  );
};

export default CreditCardStatement;
