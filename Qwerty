// __tests__/CreditCardStatement.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import CreditCardStatement from '../pages/creditCard/CreditCardStatement';
import { useSelector, useDispatch } from 'react-redux';
import * as nextRouter from 'next/router';
import { sortedMonthList } from '../utils/constants';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));

jest.mock('ui', () => ({
  useLocale: () => ({
    creditcard: {
      SELECT_PERIOD: 'Select Period',
      SELECT_MONTH: 'Select Month',
      SELECT_YEAR: 'Select Year',
      VIEW_CC_STATEMENT: 'View Statement',
      CONFIRM_BUTTON: 'Confirm',
      CC_STATEMENT_NOT_FOUND: 'Statement not found',
      CC_STATEMENT_VIEW_INFO: 'To view your statement...',
      CC_STATEMENT_HELPLINE: '1800-123-456',
      NOTE: 'Note',
      CC_SELECT_BILLING_CYCLE: 'Select Billing Cycle',
      SUBMIT: 'Submit',
      PAST_STATEMENT: 'Past Statements',
    }
  }),
  CREDIT_CARD_APP: {
    infoicon: '/info.png',
  },
}));

describe('CreditCardStatement - no redux/thunk', () => {
  const pushMock = jest.fn();
  const dispatchMock = jest.fn();

  beforeEach(() => {
    (useSelector as jest.Mock).mockImplementation((cb) =>
      cb({
        creditcardCombineReducers: {
          creditCardDashboardReducer: {
            selectedCreditCardData: { crdNbr: '1234' },
            isLoading: false,
            notification: {
              enable: false,
              notificationMSG: '',
              type: '',
            },
          },
          creditCardStatementReducer: {
            creditCardStatementDateList: [],
          },
        },
      })
    );

    (useDispatch as jest.Mock).mockReturnValue(dispatchMock);

    (nextRouter.useRouter as jest.Mock).mockReturnValue({
      locale: 'en',
      push: pushMock,
    });
  });

  it('renders and interacts with CreditCardStatement', () => {
    render(<CreditCardStatement />);

    expect(screen.getByText('Select Period')).toBeInTheDocument();

    const yearDropdown = screen.getByPlaceholderText('Select Year');
    fireEvent.change(yearDropdown, { target: { value: String(new Date().getFullYear()) } });

    const monthDropdown = screen.getByPlaceholderText('Select Month');
    fireEvent.change(monthDropdown, { target: { value: sortedMonthList[0].value } });

    const confirmBtn = screen.getByText('Confirm');
    expect(confirmBtn).toBeEnabled();

    fireEvent.click(confirmBtn);
    expect(dispatchMock).toHaveBeenCalled();
  });
});
