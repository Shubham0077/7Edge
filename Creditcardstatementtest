// __tests__/CreditCardStatement.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import CreditCardStatement from '../pages/creditCard/CreditCardStatement';
import * as nextRouter from 'next/router';
import { CREDIT_CARD_APP } from 'ui';
import { sortedMonthList } from '../utils/constants';

jest.mock('ui', () => ({
  ...jest.requireActual('ui'),
  useLocale: () => ({
    creditcard: {
      SELECT_PERIOD: 'Select Period',
      SELECT_MONTH: 'Select Month',
      SELECT_YEAR: 'Select Year',
      VIEW_CC_STATEMENT: 'View Statement',
      CONFIRM_BUTTON: 'Confirm',
      CC_STATEMENT_NOT_FOUND: 'Statement not found',
      CC_STATEMENT_VIEW_INFO: 'To view your statement...',
      CC_STATEMENT_HELPLINE: '1800-123-456',
      NOTE: 'Note',
      CC_SELECT_BILLING_CYCLE: 'Select Billing Cycle',
      SUBMIT: 'Submit',
      PAST_STATEMENT: 'Past Statements',
    }
  }),
  CREDIT_CARD_APP: {
    infoicon: '/info.png',
  },
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));

const mockStore = configureStore([thunk]);
const routerPush = jest.fn();

describe('CreditCardStatement', () => {
  let store: any;

  beforeEach(() => {
    (nextRouter.useRouter as jest.Mock).mockReturnValue({
      locale: 'en',
      push: routerPush,
    });

    store = mockStore({
      creditcardCombineReducers: {
        creditCardDashboardReducer: {
          selectedCreditCardData: { crdNbr: '1234' },
          isLoading: false,
          notification: {
            enable: false,
            notificationMSG: '',
            type: '',
          },
        },
        creditCardStatementReducer: {
          creditCardStatementDateList: [],
        },
      },
    });
  });

  it('renders CreditCardStatement component and allows interaction', () => {
    render(
      <Provider store={store}>
        <CreditCardStatement />
      </Provider>
    );

    expect(screen.getByText('Select Period')).toBeInTheDocument();
    expect(screen.getByText('Select Month')).toBeInTheDocument();
    expect(screen.getByText('Select Year')).toBeInTheDocument();
    expect(screen.getByText('Confirm')).toBeDisabled();

    const yearDropdown = screen.getByPlaceholderText('Select Year');
    fireEvent.change(yearDropdown, { target: { value: String(new Date().getFullYear()) } });

    const monthDropdown = screen.getByPlaceholderText('Select Month');
    fireEvent.change(monthDropdown, { target: { value: sortedMonthList[0].value } });

    expect(screen.getByText('Confirm')).toBeEnabled();

    fireEvent.click(screen.getByText('Confirm'));
    // Since statement list is empty, expect notification
    const actions = store.getActions();
    expect(actions.some(a => a.type === 'creditCardDashboard/showNotification')).toBe(true);
  });
});
