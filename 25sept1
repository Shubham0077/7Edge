{bidData.map((bid, index) => (
              <TableRow key={`${bid.quantity}-${index}`}>
                <TableCell>
                  <TextField
                    data-testid={`price-${index}`}
                    type="number"
                    inputRef={(el) => (inputRefs.current[`quantity-${index}`] = el)}
                    value={bid.quantity}
                    onChange={(e) => handleInputChange(index, 'quantity', e.target.value)}
                    onBlur={(e) => {
                      if (e.target.value === '') return;
                      calculateBlockedAmount(index);
                    }}
                    variant="outlined"
                    size="small"
                    error={!!bid.quantityError}
                    helperText={bid.quantityError}
                  />
                </TableCell>
                <TableCell>
                  <TextField
                    data-testid={`quantity-${index}`}
                    type="number"
                    inputProps={{ step: 1 }}
                    onKeyDown={(e) => {
                      if (e.key === '.' || e.key === 'E' || e.key === 'e') {
                        e.preventDefault();
                      }
                    }}
                    inputRef={(el) => (inputRefs.current[`price-${index}`] = el)}
                    value={bid.price}
                    onChange={(e) => {
                      if (e.target.value === '') {
                        handleInputChange(index, 'price', null);
                      } else {
                        handleInputChange(index, 'price', e.target.value);
                      }
                    }}
                    onBlur={(e) => {
                      if (e.target.value === '') return;
                      calculateBlockedAmount(index);
                    }}
