import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import BidTable from '../../components/asba/BidTable';


jest.mock('next/router', () => ({
    useRouter() {
      return {
        pathname: '',
        push: jest.fn(),
      };
    },
  }));

jest.mock('jose', () => ({
    jose: jest.fn(),
  }));

  jest.mock('react-redux', () => ({
    ...jest.requireActual('react-redux'),
    useSelector: jest.fn(),
  }));
  
  jest.mock('@mui/material', () => ({
    ...jest.requireActual('@mui/material'),
    useMediaQuery: jest.fn().mockReturnValue(false),
  }));
  
  jest.mock('jose', () => ({
    jose: jest.fn(),
    CompactEncrypt: jest.fn(),
  }));
  
  jest.mock('@moengage/web-sdk', () => ({
    initialize: jest.fn(),
    add_unique_user_id: jest.fn(),
    track_event: jest.fn(),
    add_user_attribute: jest.fn(),
    isMoeLoaded: jest.fn().mockReturnValue(true),
  }));

describe('BidTable Component', () => {
  const mockSetMaxBidRow = jest.fn();
  const mockSetBidDataRows = jest.fn();
  const mockSetCutOff = jest.fn();

  const mockProps = {
    investorCategoryRes: { 
      noOfBidsPerApplication: 5,
      minimumNoOFShares: 10,
      minimumBidPrice: 100,
      maximumBidPrice: 500,
      cutOff: 'Y',
      minimumApplicationAmt: 1000,
      discountedMaximumBidPrice: 450,
      discountedMinimumBidPrice: 90,
      maximumApplicationAmt: 5000,
      miscountAllowed: 'Y',
      discountAmount: 50,
      maximumNoOFShares: 100,
     },
    setMaxBidRow: mockSetMaxBidRow,
    isAdd: 'N',
    amountBlocked: 5000,
    bidDetails: [
      {issueName:"Hexaware Technologies Limited",issueSymbol:"HEXT",issueType:"IPO",issueStartDate:"07/04/202510:00",issueEndDate:"30/06/202515:30",applicableInvestorCat:"CO,EMP,FI,FII,IND,IC,MF,NOH,OTH,POL,SHA"},{issueName:"Hexaware Technologies Limited",issueSymbol:"HEXT",issueType:"IPO",issueStartDate:"07/04/202510:00",issueEndDate:"30/06/202515:30",applicableInvestorCat:"CO,EMP,FI,FII,IND,IC,MF,NOH,OTH,POL,SHA"}
    ],
    setBidDataRows: mockSetBidDataRows,
    setCutOff: mockSetCutOff,
    userselectedAction: 'view',
  };

  const mockProps2 = {
    investorCategoryRes: { 
      noOfBidsPerApplication: 5,
      minimumNoOFShares: 10,
      minimumBidPrice: 100,
      maximumBidPrice: 500,
      cutOff: 'Y',
      minimumApplicationAmt: 1000,
      discountedMaximumBidPrice: 450,
      discountedMinimumBidPrice: 90,
      maximumApplicationAmt: 5000,
      miscountAllowed: 'Y',
      discountAmount: 50,
      maximumNoOFShares: 100,
     },
    setMaxBidRow: mockSetMaxBidRow,
    isAdd: 'N',
    amountBlocked: 5000,
    bidDetails: [
      {issueName:"Hexaware Technologies Limited",issueSymbol:"HEXT",issueType:"IPO",issueStartDate:"07/04/202510:00",issueEndDate:"30/06/202515:30",applicableInvestorCat:"CO,EMP,FI,FII,IND,IC,MF,NOH,OTH,POL,SHA"},{issueName:"Hexaware Technologies Limited",issueSymbol:"HEXT",issueType:"IPO",issueStartDate:"07/04/202510:00",issueEndDate:"30/06/202515:30",applicableInvestorCat:"CO,EMP,FI,FII,IND,IC,MF,NOH,OTH,POL,SHA"}
    ],
    setBidDataRows: mockSetBidDataRows,
    setCutOff: mockSetCutOff,
    userselectedAction: 'block',
  };
  beforeEach(() => {
    jest.clearAllMocks();
  });

 

  it('should render userselectedAction correctly', async () => {
    render(<BidTable {...mockProps} />);

    await waitFor(() => {
      const textField = screen.getByTestId('quantity-0');

      // Simulate the onChange event
      const inputElement :any = textField.querySelector('input');

      fireEvent.change(inputElement, { target: { value: '25' } });

    })

    await waitFor(() => {
      const textField = screen.getByTestId('price-1');

      // Simulate the onChange event
      const inputElement :any = textField.querySelector('input');

      fireEvent.change(inputElement, { target: { value: '25' } });

    })
  
  });

  it('should render userselectedAction correctly', async () => {
    render(<BidTable {...mockProps2} />);
    // Find the checkbox
    const checkbox = screen.getByRole('checkbox');

    // Simulate the onChange event
    fireEvent.click(checkbox);
 
  
  });



});
