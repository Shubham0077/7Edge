import { render, screen, fireEvent, within } from '@testing-library/react';
import MockReduxProvider, { mockStore } from '../../utils/MockReduxProvider';
import '@testing-library/jest-dom';
import { useSelector } from 'react-redux';
import { useRouter } from 'next/router';
import ResetPinScreen from '../../pages/resetPin';
import LocaleConstant from '../../public/locales/en-us.json';

jest.mock('jose', () => ({
  jose: jest.fn(),
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));
const push = jest.fn();
(useRouter as jest.Mock).mockReturnValue({ push });

jest.mock('ui', () => ({
  ...jest.requireActual('ui'),
  useLocale: () => ({
    ...LocaleConstant,
  }),
}));
jest.mock('@moengage/web-sdk', () => ({
  initialize: jest.fn(),
  add_unique_user_id: jest.fn(),
  track_event: jest.fn(),
  add_user_attribute: jest.fn(),
  isMoeLoaded: jest.fn().mockReturnValue(true),
}));
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

jest.mock('../../redux/slices/creditCardDashboardSlice', () => ({
  showNotification: jest.fn(),
}));

describe('ResetPinScreen', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    jest.resetModules();
  });
  useSelector.mockImplementation((cb: any) =>
    cb({
      creditcardCombineReducers: {
        creditCardDashboardReducer: {
          selectedCreditCardData: {
            logoDesc: 'Visa',
            crdNbr: '0004271244771723788',
            outstandingBalance: '5000',
            cardholderFlg: '0',
          },
          isLoading: false,
          creditCardAccountDetails: { billingCycle: '8' },
          creditCardUniqueLocateEnquiry: [],
        },
        creditCardTemporaryCardBlockReducer: {
          temporaryCardBlockReason: [
            { blockCode: '1', blockReason: 'lost', blockId: 1 },
            { blockCode: '2', blockReason: 'expired', blockId: 2 },
          ],
        },
        creditCardResetPinReducer: {
          rsaEventResp: { data: { questions: { id: '004', question: '' } } },
        },
      },
    }),
  );

  jest.spyOn(mockStore, 'dispatch').mockImplementation(() => {
    return {
      unwrap: jest.fn(() => Promise.resolve({})),
    };
  });
  test('displays all the text', async () => {
    render(
      <MockReduxProvider>
        <ResetPinScreen />
      </MockReduxProvider>,
    );
    expect(screen.getByText('Reset PIN')).toBeInTheDocument();
    expect(screen.getByText('Enter your new 4-Digit PIN')).toBeInTheDocument();
    expect(screen.getByText('Expiry Date')).toBeInTheDocument();
    expect(screen.getByText('CVV')).toBeInTheDocument();
    expect(screen.getByText('Cancel')).toBeInTheDocument();
  });
  test('should set error when pin has same four digits', () => {
    render(
      <MockReduxProvider>
        <ResetPinScreen />
      </MockReduxProvider>,
    );

    const { getByTestId } = screen;
    const pinInput = getByTestId('enterPin_testId');
    expect(pinInput).toBeInTheDocument();
    const otpInputs = within(pinInput).getAllByRole('textbox');
    expect(otpInputs).toHaveLength(4);
    otpInputs.forEach((input, index) => {
      fireEvent.change(input, { target: { value: '1' } });
    });
  });
  test('invalid pin', async () => {
    render(
      <MockReduxProvider>
        <ResetPinScreen />
      </MockReduxProvider>,
    );
    const otp = screen.getAllByRole('textbox');
    fireEvent.change(otp[0], { target: { value: '0' } });
    fireEvent.change(otp[1], { target: { value: '0' } });
    fireEvent.change(otp[2], { target: { value: '0' } });
    fireEvent.change(otp[3], { target: { value: '0' } });

    expect(screen.getByRole('button', { name: /Cancel/i })).toBeEnabled();
    fireEvent?.click(screen?.getByRole('button', { name: /Cancel/i }));
    expect(screen.getByRole('button', { name: /Confirm PIN/i })).not.toBeEnabled();
  });
  test('mismatch pin', async () => {
    const mockDispatch = jest.fn();
    jest.spyOn(require('react-redux'), 'useDispatch').mockReturnValue(mockDispatch);

    render(
      <MockReduxProvider>
        <ResetPinScreen />
      </MockReduxProvider>,
    );
    const otp = screen.getAllByRole('textbox');
    fireEvent.change(otp[0], { target: { value: '1' } });
    fireEvent.change(otp[1], { target: { value: '3' } });
    fireEvent.change(otp[2], { target: { value: '2' } });
    fireEvent.change(otp[3], { target: { value: '7' } });

    fireEvent.change(otp[4], { target: { value: '1' } });
    fireEvent.change(otp[5], { target: { value: '2' } });
    fireEvent.change(otp[6], { target: { value: '2' } });
    fireEvent.change(otp[7], { target: { value: '7' } });
  });
  test('valid pin', async () => {
    render(
      <MockReduxProvider>
        <ResetPinScreen />
      </MockReduxProvider>,
    );
    const otp = screen.getAllByRole('textbox');
    fireEvent.change(otp[0], { target: { value: '1' } });
    fireEvent.change(otp[1], { target: { value: '3' } });
    fireEvent.change(otp[2], { target: { value: '2' } });
    fireEvent.change(otp[3], { target: { value: '7' } });

    fireEvent.change(otp[4], { target: { value: '1' } });
    fireEvent.change(otp[5], { target: { value: '3' } });
    fireEvent.change(otp[6], { target: { value: '2' } });
    fireEvent.change(otp[7], { target: { value: '7' } });

    expect(screen.getByRole('button', { name: /Confirm PIN/i })).toBeEnabled();
    fireEvent.click(screen.getByRole('button', { name: /Confirm PIN/i }));
    jest.spyOn(mockStore, 'dispatch').mockImplementation(() => {
      return {
        unwrap: jest.fn(() =>
          Promise.resolve({
            returnCode: 0,
          }),
        ),
      };
    });
  });
});
