import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import CreditcardBillPaymentCASA from '../../pages/CreditcardBillPaymentCASA';
import MockReduxProvider from '../../utils/MockReduxProvider';

describe('onChangeCustomAmount behavior', () => {
  it('enables Proceed button for valid custom amount', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByLabelText(/custom amount/i);
    await user.click(customRadio);

    const inputWrapper = await screen.findByTestId('custom-amount-due');
    const input = inputWrapper.querySelector('input')!;
    await user.clear(input);
    await user.type(input, '100');

    const proceed = screen.getByText(/proceed/i).closest('button');
    expect(proceed).not.toBeDisabled();
  });

  it('disables Proceed and shows error for high amount', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByLabelText(/custom amount/i);
    await user.click(customRadio);

    const inputWrapper = await screen.findByTestId('custom-amount-due');
    const input = inputWrapper.querySelector('input')!;
    await user.clear(input);
    await user.type(input, '999999');

    const proceed = screen.getByText(/proceed/i).closest('button');
    expect(proceed).toBeDisabled();

    const errorText = screen.getByText(/min/i); // matches "Min : 1, Max : ..."
    expect(errorText).toBeInTheDocument();
  });

  it('disables Proceed for empty input', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByLabelText(/custom amount/i);
    await user.click(customRadio);

    const inputWrapper = await screen.findByTestId('custom-amount-due');
    const input = inputWrapper.querySelector('input')!;
    await user.clear(input);

    const proceed = screen.getByText(/proceed/i).closest('button');
    expect(proceed).toBeDisabled();
  });
});
