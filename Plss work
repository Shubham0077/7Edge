// tests/tds/index.test.tsx
import React from 'react';
import '@testing-library/jest-dom';
import { render, fireEvent, waitFor, getByText, getByTestId } from '@testing-library/react';
import TdsPage from '../../pages/serviceRequest/tds/index'; // Update the path to the correct location of TdsPage
import * as reactRedux from 'react-redux';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';

import userEvent from '@testing-library/user-event';

const user = userEvent.setup();

// 👇 Mock both selector hooks
jest.mock('../../redux/hooks', () => ({
  useAppDispatch: jest.fn(),
  useAppSelector: jest.fn(),
}));

jest.mock('ui', () => ({
  ...jest.requireActual('ui'),
  useLocale: () => ({
    serviceRequest: {
      DOWNLOAD: 'Download',
      SHARE: 'Share',
    },
  }),
}));

jest.mock('next/router', () => ({
  useRouter: jest.fn(() => ({
    locale: 'en',
  })),
}));

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(() => jest.fn()),
}));

jest.mock('../../redux/serviceRequestSlice', () => ({
  generateOtp: jest.fn(),
  validateMobileOtp: jest.fn(),
  downloadTdsCertificate: jest.fn(),
}));

jest.mock('jose', () => ({
  jose: jest.fn(),
}));

const mockDispatch = jest.fn();

describe('TdsPage Component (no redux-mock-store)', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    const mockState = {
      authdata: {
        verifyPostLoginResp: {
          cifDetails: [
            {
              finacleCif: [
                {
                  PAN: 'ABCDE1234F',
                  phoneNumber: '9999999999',
                  accounts: [{ accountOpenDate: '2020-01-01' }],
                },
              ],
            },
          ],
        },
        userProfile: {
          countryCode: '+91',
        },
      },
      serviceRequest: {
        generateOtpData: {
          referenceId: 'abc123',
        },
      },
    };

    (useAppSelector as jest.mock).mockImplementation((selector) =>
      selector({
        ...mockState,
        serviceRequest: {
          generateOtpData: { referenceId: 'xyz123' },
          getYears: [{ label: '2023-2024', value: '2023-2024' }],
          uniqueQuarterList: [{ label: 'Quarter1', value: 'Q1' }],
        },
      }),
    );

    // 🔁 mock `useAppDispatch` and `useAppSelector`
    const hooks = require('../../redux/hooks');
    hooks.useAppDispatch.mockReturnValue(mockDispatch);
    hooks.useAppSelector.mockImplementation((fn) => fn(mockState));

    // ✅ mock built-in react-redux `useSelector` for panNumber + accounts
    jest.spyOn(reactRedux, 'useSelector').mockImplementation((fn: any) => fn(mockState));
  });

  it('selects both dropdowns and triggers dispatch', async () => {
    const user = userEvent.setup();
    const { getByTestId, getByText } = render(<TdsPage />);

    await user.click(getByTestId('year-dropdown'));
    await user.click(getByText('2023-2024'));

    await user.click(getByTestId('quarter-dropdown'));
    await user.click(getByText('Q1'));

    const downloadButton = getByTestId('download-button');
    await user.click(downloadButton);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
    });
  });

  it('renders PAN number', () => {
    const { getByText } = render(<TdsPage />);
    expect(getByText('ABCDE1234F')).toBeInTheDocument();
  });

  it('calls dispatch on clicking download', () => {
    const { getByTestId } = render(<TdsPage />);
    fireEvent.click(getByTestId('continueButtonAccounts'));
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('calls dispatch on clicking share', () => {
    const { getByText } = render(<TdsPage />);
    fireEvent.click(getByText(/Share/i));
    expect(mockDispatch).toHaveBeenCalled();
  });
});
