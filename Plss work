import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import TdsPage from '../../../pages/serviceRequest/tds/index';
import * as reactRedux from 'react-redux';

// 👇 Mock both selector hooks
jest.mock('../../../redux/hooks', () => ({
  useAppDispatch: jest.fn(),
  useAppSelector: jest.fn(),
}));

jest.mock('../../../redux/serviceRequestSlice', () => ({
  generateOtp: jest.fn(),
  validateMobileOtp: jest.fn(),
  downloadTdsCertificate: jest.fn(),
}));

const mockDispatch = jest.fn();

describe('TdsPage Component (no redux-mock-store)', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    const mockState = {
      authdata: {
        verifyPostLoginResp: {
          cifDetails: [
            {
              finacleCif: [
                {
                  PAN: 'ABCDE1234F',
                  phoneNumber: '9999999999',
                  accounts: [{ accountOpenDate: '2020-01-01' }],
                },
              ],
            },
          ],
        },
        userProfile: {
          countryCode: '+91',
        },
      },
      serviceRequest: {
        generateOtpData: {
          referenceId: 'abc123',
        },
      },
    };

    // 🔁 mock `useAppDispatch` and `useAppSelector`
    const hooks = require('../../../redux/hooks');
    hooks.useAppDispatch.mockReturnValue(mockDispatch);
    hooks.useAppSelector.mockImplementation((fn) => fn(mockState));

    // ✅ mock built-in react-redux `useSelector` for panNumber + accounts
    jest.spyOn(reactRedux, 'useSelector').mockImplementation((fn: any) => fn(mockState));
  });

  it('renders PAN number', () => {
    const { getByText } = render(<TdsPage />);
    expect(getByText('ABCDE1234F')).toBeInTheDocument();
  });

  it('calls dispatch on clicking download', () => {
    const { getByText } = render(<TdsPage />);
    fireEvent.click(getByText(/Download/i));
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('calls dispatch on clicking share', () => {
    const { getByText } = render(<TdsPage />);
    fireEvent.click(getByText(/Share/i));
    expect(mockDispatch).toHaveBeenCalled();
  });
});
