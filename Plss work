import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { Box, Grid, Typography } from '@mui/material';
import ScreenContainer from '../../components/screenContainer';
import styles from '../../styles/dashboard/viewManageBillingCycle.module.css';
import { CREDIT_CARD_APP, useLocale } from 'ui';
import {
  NOTIFICATION_MESSAGES,
  NOTIFICATION_TYPE,
  SCREEN_NAMES,
  constants,
} from '../../utils/constants';
import MuiTextField from '../../components/common-components/MuiTextField';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { useDispatch, useSelector } from 'react-redux';
import {
  ICreditCardDashboard,
  billingCycleUpdateAction,
  hideNotification,
  showNotification,
} from '../../redux/slices/creditCardDashboardSlice';
import moment from 'moment';
import { AppDispatch, IState } from '../../redux/creditcardStore';
import { getCreditcardDateAction } from '../../redux/slices/creditCardStatementsSlice';
import dayjs, { Dayjs } from 'dayjs';
import { IResponse } from '../../utils/authInteface';

const ViewManageBillingCycle = () => {
  const router = useRouter();
  const locale = useLocale(router.locale)?.creditcard;
  const dispatch: AppDispatch = useDispatch();

  const rootReducer = useSelector((state: IState) => state);
  const creditCardDashboardReducer: ICreditCardDashboard =
    rootReducer?.creditcardCombineReducers?.creditCardDashboardReducer;
  const selectedCard = creditCardDashboardReducer?.selectedCreditCardData ?? {};
  const creditCardAccountDetails = creditCardDashboardReducer?.creditCardAccountDetails;

  const billingCycle = Number(creditCardAccountDetails?.billingCycle ?? '0');
  const currentDate = moment({
    year: moment().year(),
    month: moment().month(),
    date: billingCycle,
  });
  const currentBillngCycleDate = billingCycle ? currentDate?.format(constants.DATE_FORMAT) : '';
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [isBillingCycleUpdated, setIsBillingCycleUpdated] = useState(false);
  const [minDateUI, setMinDateUI] = useState<Date | null>(null);
  const [maxDateUI, setMaxDateUI] = useState<Date | null>(null);

  useEffect(() => {
    checkIsBillingCycleUpdated();
  }, []);

  const checkIsBillingCycleUpdated = () => {
    const submissionPromise = dispatch(
      getCreditcardDateAction({ account: selectedCard?.crdNbr }),
    ).unwrap();
    submissionPromise
      .then((response) => {
        if (response) {
          const currentYear = `${moment().year()}`;
          let datesOfcurrentYear = response?.creditCardStatementDate?.filter(
            (stmntdate) => stmntdate?.sdStmtYear === currentYear,
          );
          const allSame = datesOfcurrentYear.every((statementDate, index, array) => {
            return index === 0 || statementDate.sdStmtDate === array[index - 1].sdStmtDate;
          });
          if (allSame) {
            setIsBillingCycleUpdated(false);
          } else {
            setIsBillingCycleUpdated(true);
            const param = {
              enable: true,
              msg: locale?.BILLING_CYCLE_UPDATE_ONCE_IN_YEAR,
              type: NOTIFICATION_TYPE.FAILURE,
            };
            dispatch(showNotification(param));
          }
        }
      })
      .catch(() => {
        const param = {
          enable: true,
          msg: NOTIFICATION_MESSAGES.SOMETHING_WENT_WRONG,
          type: NOTIFICATION_TYPE.FAILURE,
        };
        dispatch(showNotification(param));
      });
  };

  const handleDateSelect = (date: Dayjs | null) => {
    if (date) {
      const dayjsDate = dayjs(date);
      const jsDate: Date = dayjsDate.toDate();
      const dateOnly = new Date(jsDate);
      setSelectedDate(dateOnly ? moment(dateOnly).format(constants.DATE_FORMAT) : '');
    }
  };

  const handleProceed = () => {
    if (Number(selectedCard?.outstandingBalance) > 0) {
      const param = {
        enable: true,
        msg: locale?.BILLING_CYCLE_DUE_AMOUNT_REMINDER,
        type: NOTIFICATION_TYPE.FAILURE,
      };
      dispatch(showNotification(param));
      return;
    }
    const parsedDate = moment(selectedDate, constants.DATE_FORMAT);
    const dateOnly = parsedDate.format(constants.DATE);
    const submissionPromise = dispatch(
      billingCycleUpdateAction({ account: selectedCard?.crdNbr, billCyc: dateOnly }),
    ).unwrap();
    submissionPromise
      .then((response: IResponse) => {
        if (response?.returnCode === 0) {
          router.push({
            pathname: SCREEN_NAMES.SUCCESS_SCREEN,
            query: {
              msg1: locale?.REQUEST_ACCESPTED,
              msg2: locale?.MANAGE_BILLING_CYCLE_SUCCESS_MSG,
              backTo: SCREEN_NAMES.DASHBOARD,
              btnText: locale?.GOTO_HOME,
              fromScreen: SCREEN_NAMES.VIEW_MANAGE_BILLINGCYCLE,
            },
          });
        } else {
          const param = {
            enable: true,
            msg: response?.message ?? NOTIFICATION_MESSAGES?.SOMETHING_WENT_WRONG,
            type: NOTIFICATION_TYPE.FAILURE,
          };
          dispatch(showNotification(param));
        }
      })
      .catch((err: Error) => {
        console.log(err);
      });
  };
  const datesEnabled = (dateOnly: Dayjs) => {
    const dayjsDate = dayjs(dateOnly);
    const jsDate: Date = dayjsDate.toDate();
    const date = new Date(jsDate);

    let currMonth = moment().month() + 2;
    let currYear = moment().year();
    const date3 = `${currMonth}-03-${currYear}`;
    const date5 = `${currMonth}-05-${currYear}`;
    const date8 = `${currMonth}-08-${currYear}`;
    const date12 = `${currMonth}-12-${currYear}`;
    const date15 = `${currMonth}-15-${currYear}`;
    const date18 = `${currMonth}-18-${currYear}`;

    return (
      (date < new Date(date3) || date > new Date(date5)) &&
      (date < new Date(date8) || date > new Date(date8)) &&
      (date < new Date(date12) || date > new Date(date12)) &&
      (date < new Date(date15) || date > new Date(date15)) &&
      (date < new Date(date18) || date > new Date(date18))
    );
  };

  const datePickerDisable = () => {
    const currentDate = new Date();
    let currMonth = moment().month() + 1;
    let currYear = moment().year();
    const date20 = `${currMonth}-20-${currYear}`;
    const date30 = `${currMonth}-31-${currYear}`;
    if (currentDate > new Date(date20) && currentDate < new Date(date30)) {
      return false;
    } else {
      return true;
    }
  };
  function datePickerIcon() {
    return <img src={CREDIT_CARD_APP.calender_orange} alt="Date picker icon" width={15} />;
  }
  const handleDatePickerOpen = () => {
    const currentDate = new Date();
    const minDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
    const maxDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 30);
    setMinDateUI(minDate);
    setMaxDateUI(maxDate);
  };
  return (
    <ScreenContainer
      loader={creditCardDashboardReducer?.isLoading}
      screenName={locale?.VM_BILLINGCYCLE}
      showMore={false}
      enableConfirmBtn={Boolean(selectedDate) && !isBillingCycleUpdated}
      footerOnCancelText={locale?.CANCEL_BUTTON}
      footerOnSuccessText={locale?.PROCEED_BUTTON}
      footerOnCancel={() => router.push(SCREEN_NAMES.DASHBOARD)}
      footerOnSuccess={handleProceed}
      notification={{
        enable: creditCardDashboardReducer?.notification?.enable,
        notificationMSG: creditCardDashboardReducer?.notification?.notificationMSG,
        type: creditCardDashboardReducer?.notification?.type,
        onHideNotification: () => dispatch(hideNotification()),
      }}
    >
      <Grid item xs={12} sm={8.5}>
        <Box className={styles.outercard} p={2}>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={5} marginTop={3}>
              <MuiTextField
                disabled={true}
                headerText={locale?.CUSTOMER_NAME}
                value={creditCardAccountDetails?.shortName}
              />
            </Grid>
            <Grid item xs={12} sm={5} marginTop={3}>
              <MuiTextField
                disabled={true}
                headerText={locale?.CURRENT_BILLINGCYCLE}
                value={currentBillngCycleDate}
              />
            </Grid>
            <Grid item xs={12} sm={5}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <Typography variant="body2" className={`Label12 ${styles.shadeGray70}`}>
                  {locale?.DESIRED_BDATE}
                </Typography>
                <DatePicker
                  data-testid="date-picker"
                  format={constants.DATE_FORMAT}
                  shouldDisableDate={datesEnabled}
                  disabled={datePickerDisable()}
                  className={
                    datePickerDisable()
                      ? `${styles.datePicker} ${styles.datePickerDisabled}`
                      : styles.datePicker
                  }
                  slots={{ openPickerIcon: datePickerIcon }}
                  onChange={(date: Dayjs | null) => {
                    handleDateSelect(date);
                  }}
                  minDate={dayjs(minDateUI)}
                  maxDate={dayjs(maxDateUI)}
                  onOpen={handleDatePickerOpen}
                />
              </LocalizationProvider>
            </Grid>

            <Grid item xs={12}>
              <Box className={styles.disclaimerGrid}>
                <Grid container>
                  <img src={CREDIT_CARD_APP.Danger_Circle} alt="Danger Icon" />
                  <Typography variant="body1" className={styles.disclaimerHeader}>
                    {locale?.DISCLAIMER}
                  </Typography>
                </Grid>
                <Typography variant="body2" className={styles.disclaimerPointers}>
                  <ul>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO1}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO2}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO3}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO4}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO5}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO6}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO7}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO8}</li>
                    <li>{locale?.BILLING_CYCLE_INFO?.INFO9}</li>
                  </ul>
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Box>
      </Grid>
    </ScreenContainer>
  );
};

export default ViewManageBillingCycle;
