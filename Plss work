// tests/tds/index.test.tsx
import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import TdsPage from '../../../pages/serviceRequest/tds/index';

// ðŸ‘‡ Mock only what we need
jest.mock('../../../redux/hooks', () => ({
  useAppDispatch: jest.fn(),
  useAppSelector: jest.fn(),
}));

jest.mock('../../../redux/serviceRequestSlice', () => ({
  generateOtp: jest.fn(),
  validateMobileOtp: jest.fn(),
  downloadTdsCertificate: jest.fn(),
}));

const mockDispatch = jest.fn();

import { useAppSelector, useAppDispatch } from '../../../redux/hooks';

describe('TdsPage Component (no redux store)', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    (useAppDispatch as jest.Mock).mockReturnValue(mockDispatch);

    (useAppSelector as jest.Mock).mockImplementation((selectorFn) =>
      selectorFn({
        authdata: {
          verifyPostLoginResp: {
            cifDetails: [
              {
                finacleCif: [
                  {
                    PAN: 'ABCDE1234F',
                    phoneNumber: '9999999999',
                    accounts: [{ accountOpenDate: '2019-04-01' }],
                  },
                ],
              },
            ],
          },
          userProfile: {
            countryCode: '+91',
          },
        },
        serviceRequest: {
          generateOtpData: { referenceId: 'xyz123' },
        },
      })
    );
  });

  it('renders with PAN number', () => {
    const { getByText } = render(<TdsPage />);
    expect(getByText('ABCDE1234F')).toBeInTheDocument();
  });

  it('calls dispatch when clicking download', () => {
    const { getByText } = render(<TdsPage />);
    fireEvent.click(getByText(/Download/i));
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('calls dispatch when clicking share', () => {
    const { getByText } = render(<TdsPage />);
    fireEvent.click(getByText(/Share/i));
    expect(mockDispatch).toHaveBeenCalled();
  });
});
