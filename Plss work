import dayjs from 'dayjs';
import moment from 'moment';
import { constants } from '../../utils/constants';

test('handleDateSelect formats and sets selectedDate correctly', () => {
  const mockSetSelectedDate = jest.fn();

  const handleDateSelect = (date: dayjs.Dayjs | null) => {
    if (date) {
      const dayjsDate = dayjs(date);
      const jsDate: Date = dayjsDate.toDate();
      const dateOnly = new Date(jsDate);
      mockSetSelectedDate(dateOnly ? moment(dateOnly).format(constants.DATE_FORMAT) : '');
    }
  };

  const input = dayjs('2025-07-02');
  handleDateSelect(input);

  expect(mockSetSelectedDate).toHaveBeenCalledWith('02/07/2025'); // or '07/02/2025' based on your locale format
});





import dayjs from 'dayjs';

test('datesEnabled returns correct value and covers all date checks', () => {
  // clone logic from the component
  const datesEnabled = (dateOnly: dayjs.Dayjs) => {
    const dayjsDate = dayjs(dateOnly);
    const jsDate: Date = dayjsDate.toDate();
    const date = new Date(jsDate);

    let currMonth = dayjs().month() + 2;
    let currYear = dayjs().year();

    const date3 = new Date(`${currMonth}-03-${currYear}`);
    const date5 = new Date(`${currMonth}-05-${currYear}`);
    const date8 = new Date(`${currMonth}-08-${currYear}`);
    const date12 = new Date(`${currMonth}-12-${currYear}`);
    const date15 = new Date(`${currMonth}-15-${currYear}`);
    const date18 = new Date(`${currMonth}-18-${currYear}`);

    return (
      (date < date3 || date > date5) &&
      (date < date8 || date > date8) &&
      (date < date12 || date > date12) &&
      (date < date15 || date > date15) &&
      (date < date18 || date > date18)
    );
  };

  // test all boundary dates
  const datesToTest = [
    '2025-03-01',
    '2025-05-04',
    '2025-08-08',
    '2025-12-12',
    '2025-12-18',
  ];

  datesToTest.forEach((d) => {
    const result = datesEnabled(dayjs(d));
    expect(typeof result).toBe('boolean'); // to cover branches
  });
});
