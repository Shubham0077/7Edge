import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import CreditcardBillPaymentCASA from '../../pages/CreditcardBillPaymentCASA';
import MockReduxProvider from '../../utils/MockReduxProvider';

describe('onChangeCustomAmount', () => {
  it('enables confirm button when valid custom amount is entered', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByDisplayValue('CUSTOM_AMOUNT_DUE');
    await user.click(customRadio);

    const input = screen.getByTestId('custom-amount-due').querySelector('input')!;
    await user.clear(input);
    await user.type(input, '100');

    const proceed = screen.getByText(/Proceed/i).closest('button');
    expect(proceed).not.toBeDisabled();
  });

  it('disables confirm button and shows error for invalid high amount', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByDisplayValue('CUSTOM_AMOUNT_DUE');
    await user.click(customRadio);

    const input = screen.getByTestId('custom-amount-due').querySelector('input')!;
    await user.clear(input);
    await user.type(input, '999999'); // > totCrlim

    const proceed = screen.getByText(/Proceed/i).closest('button');
    expect(proceed).toBeDisabled();

    // Optional: assert error message appears
    const errorText = screen.getByText(/Min/i); // based on locale?.MIN
    expect(errorText).toBeInTheDocument();
  });

  it('disables confirm button for empty custom amount', async () => {
    const user = userEvent.setup();

    render(
      <MockReduxProvider>
        <CreditcardBillPaymentCASA />
      </MockReduxProvider>
    );

    const customRadio = screen.getByDisplayValue('CUSTOM_AMOUNT_DUE');
    await user.click(customRadio);

    const input = screen.getByTestId('custom-amount-due').querySelector('input')!;
    await user.clear(input);

    const proceed = screen.getByText(/Proceed/i).closest('button');
    expect(proceed).toBeDisabled();
  });
});
