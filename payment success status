import { Typography } from '@mui/material';
import classes from '../../styles/AepsPayments/AepsPayments.module.css';
import React, { useEffect, useState } from 'react';
import { Service_Request_APP, useLocale } from 'ui';
import { useRouter } from 'next/router';
import VerifyOTPModal from '../VerifyOTPModal';
import { Constants } from '../../utils/constants';
import AepsToggleButton from './aeps-payment-toggle-button';
import AepsPaymentKnowMoreModal from './aeps-payment-know-more-modal';
import { useAppDispatch, useAppSelector } from '../../redux/hooks';
import {
  getAePSDetailsFromStrappi,
  postAepsPaymentToggle,
  sendotp,
} from '../../redux/serviceRequestSlice';
import { useSelector } from 'react-redux';
import { AePSPaymentSuccessStatusProps } from '../../types/components/aeps-payments/aeps-payements';
import ToastComponent from '../ToastComponent';
import CustomModal from '../positive-pay/common/custom-modal';

const AePSPaymentSuccessStatus: React.FC<AePSPaymentSuccessStatusProps> = ({
  mobileNumber,
  cifId,
  aepsPaymentData,
}) => {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const locale = useLocale(useRouter().locale).serviceRequest;
  const [showKnowMoreModal, setShowKnowMoreModal] = useState(Constants?.false_boolean);
  const [showotpModal, setShowotpModal] = useState(Constants?.false_boolean);
  const [showInvalidOTP, setShowInvalidOTP] = useState(Constants?.false_boolean);
  const [errorMessage, setErrorMessage] = useState('');
  const [refid, setRefid] = useState<string>('');
  const [toggleChecked, setToggleChecked] = useState<boolean>();
  const [showToast, setShowToast] = useState<any>(Constants.false_boolean);
  const [modalOpen, setModalOpen] = useState<any>({ open: Constants.false_boolean, message: '' });

  const countryCode = useSelector(
    (state: { authdata: { userProfile: { countryCode: string } } }) =>
      state?.authdata?.userProfile?.countryCode,
  );
  const strapiData = useAppSelector((state) => state.serviceRequest?.strapiData);

  const strapidata = strapiData?.data?.AepsModal;

  const handleOtpModalClose = () => {
    setShowotpModal(Constants?.false_boolean);
    setShowInvalidOTP(Constants?.false_boolean);
  };

  const generateOTP = async () => {
    try {
      const response = await dispatch(
        sendotp({ phone: mobileNumber, cifId, countryCode: countryCode ?? '+91' }),
      );
      if (response?.payload?.message == Constants?.SUCCESS) {
        setShowotpModal(Constants?.true_boolean);
        setRefid(response?.payload?.referenceId);
      } else {
        setShowInvalidOTP(Constants?.false_boolean);
        setErrorMessage(response?.payload?.message);
        setShowToast(response?.payload?.message);
      }
    } catch (error: any) {
      setShowInvalidOTP(Constants?.false_boolean);
      setErrorMessage(error?.payload?.message);
      setShowToast(error?.payload?.message);
      console.error('Error while generating OTP :', error);
    }
  };

  const aepsPaymentToggle = async (otp: string) => {
    const result = await dispatch(
      postAepsPaymentToggle({
        phoneNumber: mobileNumber,
        cifId,
        otp: otp,
        referenceId: refid,
        channelId: Constants?.INITIATED_CHANNEL,
        isEnabled: !toggleChecked,
      }),
    );
    if (result?.payload?.returnCode == '0') {
      setToggleChecked(result?.payload?.data?.isEnabled);
      setShowotpModal(Constants?.false_boolean);
      setModalOpen({
        open: Constants?.true_boolean,
        message: result?.payload?.data?.isEnabled
          ? locale?.APES_PAYMENT_SUCCESSFUL_ENABLED
          : locale?.APES_PAYMENT_DISABLED_ENABLED,
      });
    } else {
      setShowToast(result?.payload?.message);
    }
  };
  const handleClose = () => {
    setShowKnowMoreModal(Constants?.false_boolean);
  };
  const handleSendOTPClick = () => {
    generateOTP();
  };

  const handelChange = () => {
    generateOTP();
  };

  const handelShowDialog = () => {
    setShowKnowMoreModal(Constants?.true_boolean);
  };

  useEffect(() => {
    dispatch(getAePSDetailsFromStrappi());
  }, []);
  useEffect(() => {
    setToggleChecked(aepsPaymentData?.isEnabled);
  }, [aepsPaymentData?.isEnabled]);

  return (
    <>
      <img src={strapidata?.headerLogo?.url} height={40} width={165} alt="Logo" />
      <Typography className={classes.home_description}>
        {locale.AEPS_PAYMENT_HOME_DESCRIPTION}
      </Typography>
      <button
        className={classes.know_more_span}
        tabIndex={0}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === '') {
            e.preventDefault();
            handelShowDialog();
          }
        }}
        onClick={handelShowDialog}
      >
        {locale.AEPS_PAYMENT_HOME_KNOW_MORE}
      </button>
      <button className={classes.master_toggle}>
        {locale.AEPS_PAYMENT}
        <AepsToggleButton value={toggleChecked} handleChange={handelChange} />
      </button>
      {showotpModal && (
        <VerifyOTPModal
          open={showotpModal}
          handleClose={handleOtpModalClose}
          locale={locale}
          handleclickBack={aepsPaymentToggle}
          handleSendOTPClick={handleSendOTPClick}
          errorMessage={errorMessage}
          showInvalidOTP={showInvalidOTP}
          setShowInvalidOTP={setShowInvalidOTP}
          setErrorMessage={setErrorMessage}
        />
      )}
      {showKnowMoreModal && (
        <AepsPaymentKnowMoreModal open={showKnowMoreModal} handleClose={handleClose} />
      )}
      {showToast && (
        <ToastComponent
          open={showToast}
          message={showToast ?? 'Something went wrong'}
          onClose={() => setShowToast(Constants?.false_boolean)}
          autoHideDuration={3000}
        />
      )}
      {modalOpen.open && (
        <CustomModal
          open={modalOpen.open}
          handleClose={() => setModalOpen({ open: Constants.false_boolean, message: '' })}
          iconSrc={Service_Request_APP.SUCCESS}
          title={Constants.SUCCESS_UPPER}
          description={modalOpen?.message}
          primaryCallback={() => router?.push(Constants?.SERVICE_REQUEST_ROUTE)}
          primaryBtnText="Back"
        />
      )}
    </>
  );
};

export default AePSPaymentSuccessStatus;
