// __tests__/TdsPage.test.tsx
import React from 'react';
import { render, fireEvent, waitFor, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import TdsPage from '../TdsPage';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import * as hooks from '../../../redux/hooks';
import * as slice from '../../../redux/serviceRequestSlice';

const mockStore = configureStore([thunk]);

jest.mock('../../../redux/hooks', () => ({
  ...jest.requireActual('../../../redux/hooks'),
  useAppDispatch: jest.fn(),
  useAppSelector: jest.fn(),
}));

jest.mock('../../../redux/serviceRequestSlice', () => ({
  generateOtp: jest.fn(),
  validateMobileOtp: jest.fn(),
  downloadTdsCertificate: jest.fn(),
}));

const mockDispatch = jest.fn();

beforeEach(() => {
  (hooks.useAppDispatch as jest.Mock).mockReturnValue(mockDispatch);
  (hooks.useAppSelector as jest.Mock).mockImplementation((selectorFn) =>
    selectorFn({
      authdata: {
        verifyPostLoginResp: {
          cifDetails: [
            {
              finacleCif: [
                {
                  phoneNumber: '9999999999',
                  PAN: 'ABCDE1234F',
                  accounts: [
                    { accountOpenDate: '2018-04-01' },
                    { accountOpenDate: '2020-06-01' },
                  ],
                },
              ],
            },
          ],
        },
        userProfile: {
          countryCode: '+91',
        },
      },
      serviceRequest: {
        generateOtpData: { referenceId: 'abc123' },
      },
    })
  );
});

describe('TdsPage Component', () => {
  const store = mockStore({});

  it('renders without crashing', () => {
    const { getByTestId } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );
    expect(getByTestId('tds-page')).toBeInTheDocument();
  });

  it('displays PAN number', () => {
    const { getByText } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );
    expect(getByText('ABCDE1234F')).toBeInTheDocument();
  });

  it('displays error screen when errorScreen is forced', async () => {
    const { getByTestId, getByText } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );

    await act(async () => {
      const event = new CustomEvent('force-error');
      window.dispatchEvent(event);
    });

    expect(getByText('Request Failed !')).toBeInTheDocument();
  });

  it('calls handleDownload on footer click', async () => {
    const { getByText } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );

    const downloadButton = getByText(/Download/i);
    fireEvent.click(downloadButton);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function));
    });
  });

  it('calls email flow on SHARE click', async () => {
    const { getByText } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );

    const shareButton = getByText(/Share/i);
    fireEvent.click(shareButton);

    await waitFor(() => {
      expect(mockDispatch).toHaveBeenCalled();
    });
  });

  it('renders OTP modal when handleOTP is true (forced)', async () => {
    const { getByTestId } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );

    await act(async () => {
      const event = new CustomEvent('force-otp');
      window.dispatchEvent(event);
    });

    expect(getByTestId('submitotpButton')).toBeInTheDocument();
  });

  it('renders success screen when successScreen is forced', async () => {
    const { getByText } = render(
      <Provider store={store}>
        <TdsPage />
      </Provider>
    );

    await act(async () => {
      const event = new CustomEvent('force-success');
      window.dispatchEvent(event);
    });

    expect(
      getByText(/Password format for PDF/)
    ).toBeInTheDocument();
  });
});
