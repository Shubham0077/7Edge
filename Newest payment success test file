// __tests__/AePSPaymentSuccessStatus.test.tsx

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AePSPaymentSuccessStatus from '../../components/AepsPayments/AePSPaymentSuccessStatus';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { Constants } from '../../utils/constants';
import * as serviceRequestSlice from '../../redux/serviceRequestSlice';
import { useRouter } from 'next/router';

jest.mock('next/router', () => ({
  useRouter: jest.fn(),
}));

jest.mock('../../redux/serviceRequestSlice', () => ({
  getAePSDetailsFromStrappi: jest.fn(),
  postAepsPaymentToggle: jest.fn(),
  sendotp: jest.fn(),
}));

jest.mock('../../components/VerifyOTPModal', () => () => <div>Verify OTP Modal</div>);
jest.mock('../../components/ToastComponent', () => ({ message }) => <div>{message}</div>);
jest.mock('../../components/positive-pay/common/custom-modal', () => ({ description }) => <div>{description}</div>);
jest.mock('../../components/AepsPayments/aeps-payment-know-more-modal', () => ({ open }) => open ? <div>Know More Modal</div> : null);

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

const renderComponent = (store) => {
  return render(
    <Provider store={store}>
      <AePSPaymentSuccessStatus
        mobileNumber="1234567890"
        cifId="CIF123"
        aepsPaymentData={{ isEnabled: true }}
      />
    </Provider>
  );
};

describe('AePSPaymentSuccessStatus Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      authdata: {
        userProfile: {
          countryCode: '+91',
        },
      },
      serviceRequest: {
        strapiData: {
          data: {
            AepsModal: {
              headerLogo: {
                url: 'logo.png',
              },
            },
          },
        },
      },
    });

    useRouter.mockReturnValue({
      locale: 'en',
      push: jest.fn(),
    });

    jest.clearAllMocks();
  });

  test('renders component correctly', () => {
    renderComponent(store);
    expect(screen.getByText('AEPS_PAYMENT')).toBeInTheDocument();
  });

  test('clicking toggle button triggers OTP generation', async () => {
    serviceRequestSlice.sendotp.mockResolvedValue({
      payload: {
        message: Constants.SUCCESS,
        referenceId: 'REF123',
      },
    });

    renderComponent(store);

    fireEvent.click(screen.getByText('AEPS_PAYMENT'));

    await waitFor(() => {
      expect(serviceRequestSlice.sendotp).toHaveBeenCalled();
      expect(screen.getByText('Verify OTP Modal')).toBeInTheDocument();
    });
  });

  test('clicking "Know More" displays modal', () => {
    renderComponent(store);

    fireEvent.click(screen.getByText('AEPS_PAYMENT_HOME_KNOW_MORE'));

    expect(screen.getByText('Know More Modal')).toBeInTheDocument();
  });

  test('displays toast message on OTP generation failure', async () => {
    serviceRequestSlice.sendotp.mockResolvedValue({
      payload: {
        message: 'OTP generation failed',
      },
    });

    renderComponent(store);

    fireEvent.click(screen.getByText('AEPS_PAYMENT'));

    await waitFor(() => {
      expect(screen.getByText('OTP generation failed')).toBeInTheDocument();
    });
  });

  test('displays success modal on AEPS payment toggle', async () => {
    serviceRequestSlice.sendotp.mockResolvedValue({
      payload: {
        message: Constants.SUCCESS,
        referenceId: 'REF123',
      },
    });

    serviceRequestSlice.postAepsPaymentToggle.mockResolvedValue({
      payload: {
        returnCode: '0',
        data: {
          isEnabled: true,
        },
      },
    });

    renderComponent(store);

    fireEvent.click(screen.getByText('AEPS_PAYMENT'));

    await waitFor(() => {
      expect(screen.getByText('Verify OTP Modal')).toBeInTheDocument();
    });

    // Simulate OTP submission
    // Assuming there's a button or input to submit OTP in the actual VerifyOTPModal
    // Since we've mocked it, we'll directly call the postAepsPaymentToggle

    await waitFor(() => {
      expect(serviceRequestSlice.postAepsPaymentToggle).toHaveBeenCalled();
      expect(screen.getByText('APES_PAYMENT_SUCCESSFUL_ENABLED')).toBeInTheDocument();
    });
  });
});
