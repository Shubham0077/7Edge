import React, { useState } from "react";
import {
  Box,
  Breadcrumbs,
  Typography,
  useMediaQuery,
  Popover,
} from "@mui/material";
import Link from "next/link";
import { breadcrumbmap } from "../utils";
import { breadcrumbFontSize } from "../styles/breadcrumbStyle";

interface Path {
  data: string;
  link?: string;
}

export const Breadcrumb = (props?: Path) => {
  const pathSegments = props?.data?.split("/");
  const linkPathSegments = props?.link?.split("/");
  const breadcrumbs = pathSegments?.map((segment, index) => ({
    label:
      breadcrumbmap[segment] ||
      `${segment.charAt(0).toUpperCase()}${segment.slice(1)}`,
    link: props?.link
      ? `/${linkPathSegments?.slice(0, index + 1).join("/")}`
      : `/${pathSegments.slice(0, index + 1).join("/")}`,
    disable: pathSegments.length === index + 1 ? true : false,
  }));

  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);
  const open = Boolean(anchorEl);
  const id = open ? "simple-popover" : undefined;
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const isMobile = useMediaQuery("(max-width:600px)");

  const elementsToDisplay = breadcrumbs?.map(
    (breadcrumb: any, index: number): any => {
      if (index > 0 && index < breadcrumbs.length - 1) {
        return (
          <Box
            key={index}
            sx={{
              borderBottom: "3px solid #F1F1F1",
              pb: "5px",
              pt: "5px",
              "&:last-child": { borderBottom: "none" },
            }}
          >
            <Link
              key={index}
              href={breadcrumb.link}
              style={{
                textDecoration: "none",
                color: "#1F1F1F",
                fontSize: "12px",
              }}
            >
              <Typography
                style={breadcrumbFontSize}
                onClick={() => {
                  setAnchorEl(null);
                }}
              >
                {breadcrumb.label}
              </Typography>
            </Link>
          </Box>
        );
      }
      return null;
    },
  );

  return (
    <Breadcrumbs
      aria-label="breadcrumb"
      sx={{
        "&.MuiBreadcrumbs-root ": { fontSize: "12px", lineHeight: "18px" },
        ml: isMobile ? 2 : 0,
        marginBottom: "1rem",
      }}
    >
      {breadcrumbs && breadcrumbs.length === 1 ? (
        <Link
          href={breadcrumbs[0].link}
          style={{ textDecoration: "none", color: "#000000" }}
        >
          <Typography style={breadcrumbFontSize}>
            {breadcrumbs[0].label} <span style={{ marginLeft: "5px" }}></span>
          </Typography>
        </Link>
      ) : breadcrumbs && breadcrumbs.length > 2 && isMobile ? (
        <Box sx={{ display: "flex" }}>
          <Link
            href={breadcrumbs[0].link}
            style={{ textDecoration: "none", color: "#000000" }}
          >
            <Typography style={breadcrumbFontSize}>
              {breadcrumbs[0].label}{" "}
              <span style={{ ...breadcrumbFontSize, marginLeft: "5px" }}>
                /
              </span>
            </Typography>
          </Link>
          <span
            style={breadcrumbFontSize}
            aria-describedby={id}
            onClick={handleClick}
          >
            &nbsp;.&nbsp;.&nbsp;.&nbsp;
          </span>
          <Popover
            id={id}
            open={open}
            anchorEl={anchorEl}
            onClose={handleClose}
            anchorOrigin={{
              vertical: "bottom",
              horizontal: "left",
            }}
          >
            <Box sx={{ pt: "10px", pb: "10px", pl: "15px", pr: "15px" }}>
              {elementsToDisplay}
            </Box>
          </Popover>

          <Typography
            sx={{
              ...breadcrumbFontSize,
              textDecoration: "none",
              color: "#8C8C8C",
            }}
          >
            <span style={breadcrumbFontSize}>/&nbsp;</span>
            {breadcrumbs[breadcrumbs.length - 1].label}{" "}
            <span style={{ marginLeft: "5px" }}></span>
          </Typography>
        </Box>
      ) : (
        breadcrumbs?.map((breadcrumb: any, index: number): any => (
          <Box key={index}>
            {!breadcrumb.disable && (
              <Link
                key={index}
                href={breadcrumb.link}
                style={{
                  textDecoration: "none",
                  color: "#1F1F1F",
                  fontSize: "12px",
                }}
              >
                <Typography style={breadcrumbFontSize}>
                  {breadcrumb.label}
                </Typography>
              </Link>
            )}
            {breadcrumb.disable && (
              <Typography
                sx={{
                  ...breadcrumbFontSize,
                  textDecoration: "none",
                  color: "#8C8C8C",
                }}
              >
                {breadcrumb.label + " "}
              </Typography>
            )}
          </Box>
        ))
      )}
    </Breadcrumbs>
  );
};
