// dummyTdsDownloadCall.test.ts

// Dummy version of the function to test the 'download' flow
const dummyTdsDownloadCall = async (val: string) => {
  const mockData = {
    returnCode: '0',
    data: {
      pdfData: 'mockBase64Data',
    },
  };

  // Mocks for internal methods
  const setSuccessScreen = jest.fn();
  const setPdf = jest.fn();
  const downloadBase64Pdf = jest.fn();

  const panNumber = 'ABCDE1234F';
  const selectedQuarterOption = 'Q1';
  const selectedYearOption = '2024-25';

  // Logic similar to your real function
  if (mockData.returnCode === '0') {
    setSuccessScreen(true);

    if (val === 'download') {
      setPdf(mockData.data.pdfData);
      downloadBase64Pdf(
        mockData.data.pdfData,
        `${panNumber}_${selectedQuarterOption}_${selectedYearOption}.pdf`
      );
    } else {
      setPdf('');
    }
  }

  return { setSuccessScreen, setPdf, downloadBase64Pdf };
};

describe('dummyTdsDownloadCall', () => {
  it('should enter download block and call setPdf & downloadBase64Pdf', async () => {
    const { setSuccessScreen, setPdf, downloadBase64Pdf } =
      await dummyTdsDownloadCall('download');

    expect(setSuccessScreen).toHaveBeenCalledWith(true);
    expect(setPdf).toHaveBeenCalledWith('mockBase64Data');
    expect(downloadBase64Pdf).toHaveBeenCalledWith(
      'mockBase64Data',
      'ABCDE1234F_Q1_2024-25.pdf'
    );
  });
});
